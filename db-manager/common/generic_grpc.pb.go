// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/generic.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBGenericClient is the client API for DBGeneric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBGenericClient interface {
	Insert(ctx context.Context, in *ProtobufInsertRequest, opts ...grpc.CallOption) (*ProtobufInsertResponse, error)
	Delete(ctx context.Context, in *ProtobufDeleteRequest, opts ...grpc.CallOption) (*ProtobufDeleteResponse, error)
	DropTable(ctx context.Context, in *ProtobufDroptableRequest, opts ...grpc.CallOption) (*ProtobufDroptableResponse, error)
}

type dBGenericClient struct {
	cc grpc.ClientConnInterface
}

func NewDBGenericClient(cc grpc.ClientConnInterface) DBGenericClient {
	return &dBGenericClient{cc}
}

func (c *dBGenericClient) Insert(ctx context.Context, in *ProtobufInsertRequest, opts ...grpc.CallOption) (*ProtobufInsertResponse, error) {
	out := new(ProtobufInsertResponse)
	err := c.cc.Invoke(ctx, "/DBGeneric/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBGenericClient) Delete(ctx context.Context, in *ProtobufDeleteRequest, opts ...grpc.CallOption) (*ProtobufDeleteResponse, error) {
	out := new(ProtobufDeleteResponse)
	err := c.cc.Invoke(ctx, "/DBGeneric/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBGenericClient) DropTable(ctx context.Context, in *ProtobufDroptableRequest, opts ...grpc.CallOption) (*ProtobufDroptableResponse, error) {
	out := new(ProtobufDroptableResponse)
	err := c.cc.Invoke(ctx, "/DBGeneric/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBGenericServer is the server API for DBGeneric service.
// All implementations must embed UnimplementedDBGenericServer
// for forward compatibility
type DBGenericServer interface {
	Insert(context.Context, *ProtobufInsertRequest) (*ProtobufInsertResponse, error)
	Delete(context.Context, *ProtobufDeleteRequest) (*ProtobufDeleteResponse, error)
	DropTable(context.Context, *ProtobufDroptableRequest) (*ProtobufDroptableResponse, error)
	mustEmbedUnimplementedDBGenericServer()
}

// UnimplementedDBGenericServer must be embedded to have forward compatible implementations.
type UnimplementedDBGenericServer struct {
}

func (UnimplementedDBGenericServer) Insert(context.Context, *ProtobufInsertRequest) (*ProtobufInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDBGenericServer) Delete(context.Context, *ProtobufDeleteRequest) (*ProtobufDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDBGenericServer) DropTable(context.Context, *ProtobufDroptableRequest) (*ProtobufDroptableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedDBGenericServer) mustEmbedUnimplementedDBGenericServer() {}

// UnsafeDBGenericServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBGenericServer will
// result in compilation errors.
type UnsafeDBGenericServer interface {
	mustEmbedUnimplementedDBGenericServer()
}

func RegisterDBGenericServer(s grpc.ServiceRegistrar, srv DBGenericServer) {
	s.RegisterService(&DBGeneric_ServiceDesc, srv)
}

func _DBGeneric_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtobufInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBGenericServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBGeneric/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBGenericServer).Insert(ctx, req.(*ProtobufInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBGeneric_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtobufDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBGenericServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBGeneric/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBGenericServer).Delete(ctx, req.(*ProtobufDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBGeneric_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtobufDroptableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBGenericServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBGeneric/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBGenericServer).DropTable(ctx, req.(*ProtobufDroptableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBGeneric_ServiceDesc is the grpc.ServiceDesc for DBGeneric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBGeneric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DBGeneric",
	HandlerType: (*DBGenericServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DBGeneric_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DBGeneric_Delete_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _DBGeneric_DropTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/generic.proto",
}
