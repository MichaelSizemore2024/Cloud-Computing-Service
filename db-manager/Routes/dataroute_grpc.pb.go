// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: Routes/dataroute.proto

package Routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataRouteClient is the client API for DataRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataRouteClient interface {
	GetTable(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error)
}

type dataRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewDataRouteClient(cc grpc.ClientConnInterface) DataRouteClient {
	return &dataRouteClient{cc}
}

func (c *dataRouteClient) GetTable(ctx context.Context, in *TableRequest, opts ...grpc.CallOption) (*TableResponse, error) {
	out := new(TableResponse)
	err := c.cc.Invoke(ctx, "/dataroute.DataRoute/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataRouteServer is the server API for DataRoute service.
// All implementations must embed UnimplementedDataRouteServer
// for forward compatibility
type DataRouteServer interface {
	GetTable(context.Context, *TableRequest) (*TableResponse, error)
	mustEmbedUnimplementedDataRouteServer()
}

// UnimplementedDataRouteServer must be embedded to have forward compatible implementations.
type UnimplementedDataRouteServer struct {
}

func (UnimplementedDataRouteServer) GetTable(context.Context, *TableRequest) (*TableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedDataRouteServer) mustEmbedUnimplementedDataRouteServer() {}

// UnsafeDataRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataRouteServer will
// result in compilation errors.
type UnsafeDataRouteServer interface {
	mustEmbedUnimplementedDataRouteServer()
}

func RegisterDataRouteServer(s grpc.ServiceRegistrar, srv DataRouteServer) {
	s.RegisterService(&DataRoute_ServiceDesc, srv)
}

func _DataRoute_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRouteServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataroute.DataRoute/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRouteServer).GetTable(ctx, req.(*TableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataRoute_ServiceDesc is the grpc.ServiceDesc for DataRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataroute.DataRoute",
	HandlerType: (*DataRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTable",
			Handler:    _DataRoute_GetTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Routes/dataroute.proto",
}
